from compas.artists import Artist
from compas.datastructures import Mesh
from compas.geometry import Translation
from compas.robots import Configuration
from compas.robots import Joint
from compas.robots import RobotModel
from compas.geometry import Rotation, Point, Vector, Frame,Plane,Cylinder,Circle
import math


# create robot model
model = RobotModel("robot", links=[], joints=[])

# create cylinder
radius, length = 0.3, 5
cylinder = Cylinder(Circle(Plane([0, 0, 0], [1, 0, 0]), radius), length)
cylinder.transform(Translation.from_vector([length / 2.0,0,0]))
mesh = Mesh.from_shape(cylinder)

# add links
n_links = 150
link0 = model.add_link("link0")
for l in range(1, n_links-1):
    model.add_link(name=("link" + str(l)), visual_mesh=mesh, visual_color=(l/n_links, 0, l/n_links))
linkN = model.add_link(("link" + str(n_links)))
print(len(model.links))

# add joints between the links
axis = (0, 0, 1)
links = model.links
origin = Frame((0, 0, 0), (1, 0, 0), (0, 1, 0))
model.add_joint("joint0", Joint.CONTINUOUS, links[0], links[1], origin, axis)
origin = Frame((length, 0, 0), (1, 0, 0), (0, 1, 0))
for j in range(2, n_links):
    joint_name = "joint1" + str(j)
    model.add_joint(joint_name, Joint.CONTINUOUS, links[j-1], links[j], origin, axis)


# Create a configuration object
config = model.zero_configuration()

for i in range(n_links-1):
    config.joint_values[i] = ((n_links-1)*math.cos(math.pi/(3*i+100)))+((n_links-1)*math.sin(math.pi/(3*i+100)))
artist = Artist(model)
artist.update(config)
artist.clear()
artist.draw_visual()
artist.redraw()